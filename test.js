#!/usr/bin/env node

const puppeteer = require('puppeteer');

async function testShaderMaker() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ Shader Maker...\n');

  const browser = await puppeteer.launch({ 
    headless: false, 
    slowMo: 1000 
  });
  
  const page = await browser.newPage();
  await page.goto('http://localhost:3000');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('‚úÖ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    await page.waitForSelector('h1');
    const title = await page.$eval('h1', el => el.textContent);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}"`);
    console.log('   ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n');

    // –¢–µ—Å—Ç 2: –í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–µ–π–¥–µ—Ä–∞
    console.log('‚úÖ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–µ–π–¥–µ—Ä–∞');
    const inputSelector = 'input[placeholder*="Describe the shader"]';
    await page.waitForSelector(inputSelector);
    await page.type(inputSelector, '–∫—Ä–∞—Å–∏–≤—ã–π –æ–≥–æ–Ω—å');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É Generate Shader –ø–æ —Ç–µ–∫—Å—Ç—É
    const generateButton = await page.evaluateHandle(() => {
      return Array.from(document.querySelectorAll('button')).find(button => 
        button.textContent.includes('Generate Shader')
      );
    });
    
    if (generateButton.asElement()) {
      await generateButton.asElement().click();
      console.log('   üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
      await page.waitForSelector('.bg-black', { timeout: 30000 });
      console.log('   ‚úÖ –®–µ–π–¥–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n');
    } else {
      console.log('   ‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ Generate Shader –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    console.log('‚úÖ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "Evaluate"');
    const evaluateButton = await page.evaluateHandle(() => {
      return Array.from(document.querySelectorAll('button')).find(button => 
        button.textContent.includes('Evaluate')
      );
    });
    
    if (evaluateButton.asElement()) {
      console.log('   ‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω–∞\n');
    } else {
      console.log('   ‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–µ–π–¥–µ—Ä)\n');
    }

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    console.log('‚úÖ –¢–µ—Å—Ç 4: –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤');
    const screenshotButton = await page.evaluateHandle(() => {
      return Array.from(document.querySelectorAll('button')).find(button => 
        button.textContent.includes('Capture Screenshots')
      );
    });
    
    if (screenshotButton.asElement()) {
      await screenshotButton.asElement().click();
      console.log('   üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
      await page.waitForTimeout(4000); // –ñ–¥–µ–º –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      console.log('   ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞—Ö–≤–∞—á–µ–Ω—ã\n');
    } else {
      console.log('   ‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n');
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    console.log('‚úÖ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤');
    const historySection = await page.$('h2');
    if (historySection) {
      const historyText = await page.evaluate(el => el.textContent, historySection);
      if (historyText.includes('Prompt History')) {
        console.log('   ‚úÖ –°–µ–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω–∞\n');
      }
    }

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:');
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —á–µ—Ä–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∏–¥–∏–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è');
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞—Ö–≤–∞—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞');
    console.log('‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å html-to-image');
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
  } finally {
    // –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await page.waitForTimeout(3000);
    await browser.close();
  }
}

if (require.main === module) {
  testShaderMaker().catch(console.error);
}

module.exports = testShaderMaker; 